G E N E R A L  I N F O R M A T I O N
 ------------------------------------
 In the sub directory where this file can be found it is possible to put 
 customized translations of the help files used by JavaPEG. It is both possible
 to override an existing help file language and to create an entire new
 translation for a non existing language (embedded language). 
 
 For a new language that does not already exist in JavaPEG, then there also has
 to be a corresponding language.** file added to the 
 <JavaPEG base directory>/resources/lang directory. See the language.info file 
 for more information about creating this language file.
 
 To override or create a new help file language, to match a new language file
 then there has to be a sub directory created in the directory where this file 
 is located. The name of the sub directory shall be the ISO 639 two
 letter code for the language. See language.info file for details about the 
 ISO 639 codes. 
 
 H E L P  F I L E  F O R M A T
 ------------------------------
 The content of the file is plain text. Line breaks in the file will be removed
 when the file content is displayed in JavaPEG and line breaks must be 
 indicated in the files with the "<LF>" construct (without double quotes).
 
 A V A I L A B L E  H E L P  F I L E S
 -------------------------------------
 There are several help files and a full list of them are listed below:
 
   user_manual_overview
   user_manual_rename
   user_manual_viewimages
   user_manual_imageviewer
   thumbnail_overview
   version_information
   references
   configuration_logging
   configuration_updates
   configuration_rename
   configuration_language
   
 C O N T E N T  O F  T H E  E N G L I S H  H E L P  F I L E S
 ------------------------------------------------------------
 
 user_manual_overview:
 
 PROGRAM DESCRIPTION<LF>
 ===================<LF>
 JavaPEG has the possibility to change the file names of jpeg images that 
 contains Exif data, Exchangeable Image File Format. The majority of digital
 cameras supports this format and saves thereby meta data (information about 
 the file itself) when the image is saved to the media storage of the camera. 
 An example of meta data might be the date when the image was shot.
 <LF>
 <LF>
 As an addition to the rename feature JavaPEG also has the possibility to 
 create thumb nail overviews. These overviews shows thumb nail versions of the
 full size images. Below each thumb nail it is possible to show meta data about
 the full size image. Each thumb nail is linked to the full size image. These 
 overviews are created in the HTML format and the purpose with them are that it
 shall be easy to get an overview of which images that are present in a 
 directory.
 <LF>
 <LF>
 It is  also possible to create image lists (slide shows) with JavaPEG. It is 
 possible to create lists in an internal JavaPEG format, which might be saved 
 and later on opened again for further processing. It is also possible to 
 export image lists to format supported by third party software. This makes it
 possible for further processing of the lists in the third party software or to
 show the images in the image list.
 <LF>
 <LF>
 There is also an embedded Image Viewer available, which displays images that 
 have been gathered in an image list (same list as the one mentioned above). 
 The image viewer offer possibility to navigate forward and backwards in the 
 list of images and it is also possible to directly view any image in the list 
 by clicking a thumbnail version in the user interface. The image viewer can 
 also show detailed meta data information about the displayed image. It is also
 possible to let the viewer automatically resize the image to fit the current 
 screen size.
 
 user_manual_rename:
 
 RENAME IMAGES<LF>
 =============<LF>
 The following text will describe how a complete program cycle works. In other 
 words start reading by going to next paragraph.
 <LF>
 <LF>
 1:<LF>
 Select a directory with images in the tree structure to the left.
 <LF>
 <LF>
 2:<LF>
 A destination directory must be selected. That is done by pushing the button 
 to the right of the field labeled "PATH TO DESTINATION DIRECTORY". When the 
 button is clicked a file chooser will appear, in which the destination 
 directory must be selected.
 <LF>
 <LF>
 3:<LF>
 "FILENAME TEMPLATE" and "SUB DIRECTORY NAME TEMPLATE" are made up by those 
 variables available in the window "VARIABLES". These variables will have it´s
 information from the embedded Exif-information in picture.
 <LF>
 <LF>
 "SUB DIRECTORY NAME TEMPLATE" can only use those variables which are marked by
 an asterisk in the list. Besides from this it is possible to mix variables 
 with static strings in form of words and numbers in any combination.
 <LF>
 <LF>
 Example of a template may be: "Image %d% - %t%"
 <LF>
 <LF>
 Which will give a result like this "Image 2005-06-15 - 16-25-14.jpg"
 <LF>
 <LF>
 4:<LF>
 To get a thumb nail overview: mark the checkbox "CREATE THUMBNAIL OVERVIEW".
 <LF>
 <LF>
 5:<LF>
 At this point all the preparations for the renaming has been done. To start 
 the rename process, push the button that has an arrow pointing to right, or by
 clicking the corresponding alternative in the File menu. 
 <LF>
 <LF>
 <LF>
 Crib - five simple steps<LF>
 ========================<LF>
 <LF>
 1. Select path to images<LF>
 2. Select destination folder and alternatives for rename process<LF>
 3. Enter file name template and sub directory name template<LF>
 4. Choose wether thumb nails shall be created<LF>
 5. Start the rename process by pushing the button with a arrow pointing to the
    right<LF>
    
 user_manual_viewimages:
 
 VIEW IMAGES<LF>
 ===========<LF>
 The following text will describe how an image list is created and how that 
 list can be saved, exported and or viewed in the Image Viewer. In other words
 start reading by going to next paragraph.
 <LF>
 <LF>
 1:<LF>
 If there has not been any directory with images selected in the tree structure
 to the left, that has to be done.
 <LF>
 <LF>
 2:<LF>
 Click on the tab with the label "VIEW IMAGES"
 <LF>
 <LF>
 3:<LF>
 Now it is possible to add images to the list by right clicking the thumbnails 
 that is displayed. Either it is possible to add only the marked image or all 
 images in the selected directory. It is possible to add the same image(s) 
 multiple times if wanted.
 <LF>
 <LF>
 4:<LF>
 It is possible to select other directories with images in the tree structure 
 to the left and repeat step 3 before the image list is saved, exported and or
 displayed in the Image Viewer.
 <LF>
 <LF>
 5:<LF>
 When all desired images have been chosen (or earlier), it is possible to have 
 a preview of the images by clicking the file name in the frame with the image 
 list.
 <LF>
 <LF>
 6:<LF>
 It is also possible to change the order of the images in the list. That is 
 done by selecting the image in the list which shall be moved and then click 
 the button with an arrow pointing up or down to, depending whether the image
 shall be moved upwards or downwards in the list. 
 <LF>
 <LF>
 7:<LF>
 Now it is possible to either save the list for further future processing 
 according to above, export it to a list format supported by a third party 
 application and or display the list in the Image Viewer. That is done by 
 either clicking the "save"-button, "export"-button or "view selected images in
 the ImageViewer"-button. JavaPEG supports the creation of image lists in the 
 formats used by the following applications:
 <LF>
 <LF>
 PolyView  (http://www.polybytes.com/)<LF>
 IrfanView (http://www.irfanview.com/)<LF>
 XnView    (http://www.xnview.com/)
 
 user_manual_imageviewer:
 
 IMAGE VIEWER<LF>
 ============<LF>
 JavaPEG has the possibility to display images. The images that can be 
 displayed are those that have been added to the "IMAGE LIST" list in the 
 "VIEW IMAGES" tab. See help for the creation of an image list in the help 
 section "VIEW IMAGES".
 <LF>
 <LF>
 1:<LF>
 If an image list has been created according to above then it is possible to 
 click the button "View selected images in the ImageViewer" in the 
 "VIEW IMAGES" tab to display the Image Viewer, otherwise create an image list
 first.
 <LF>
 <LF>
 Characteristics of the Image Viewer:
 <LF>
 <LF>
 The Image Viewer consists of three main elements: A list with available images
 to display (is displayed as a list with thumbnails of the images) to the left 
 in the user interface. In the middle there is the actual area for displaying 
 the images. To the right there is a meta data panel which displays detailed 
 meta data about the displayed image.
 <LF>
 <LF>
 The thumbnail list to the left and the meta data panel to the right are 
 possible to hide, to give more space for displaying images.
 <LF>
 <LF>
 There is support for following activities in the Image Viewer:
 <LF>
 <LF>
 * Navigation forward and backwards in the list of images, either with button 
 in the button list, or by right-clicking the actual image or by using keyboard
 accelerators.
 <LF>
 <LF>
 * Navigation to any image in the list by clicking it in the thumbnail overview
 to the left.
 <LF>
 <LF>
 * Adjust the size of the displayed image to fit the available size of the 
 image display area.
 <LF>
 <LF>
 * Automatically adjust the size of the displayed image to fit the available 
 size of the image display area when an image is selected.
 
 thumbnail_overview:
 
 CREATE THUMBNAIL OVERVIEW<LF>
 =========================<LF>
 JavaPEG has the possibility to create a thumb nail overview in the form of a 
 HTML document, which shows thumb nail versions of the files that has been 
 renamed. Each thumb nail links to the full size image. The purpose of this 
 overview is to offer a quick and easy way to see which images there is in a 
 directory.
 <LF>
 <LF>
 The look and feel of the thumb nail overview is possible to change by creating
 a layout.xml and / or a style.css file. The content and syntax of these files 
 are described in the following two files: layout.info and style.info. They are
 stored at the following location: 
 <install directory of JavaPEG>/resources/thumb/
 <LF>
 <LF>
 It is not mandatory to create both the files. It is perfectly legal to create 
 only one of them if desired. The file / files must be created in the same 
 location as the above info files are stored.
  
 version_information:
 
 VERSION INFORMATION<LF>
 ===================<LF>
 Below is a description of what each version of JavaPEG has been able to do.
 <LF>
 <LF>
 Version 2.4<LF>
 ===========<LF>
 Released 2009-??-?? Version 2.4 of JavaPEG has got two major improvements. The
 first is an embedded Image Viewer which displays images that has been added to
 the image list at the VIEW IMAGES tab. The image viewer has except for 
 navigation support of: forward backward and to any of the images in the list 
 also the possibility to automatically adapt the image to fit the window size.
 <LF>
 <LF>
 The second major improvement is the addition of a graphical interface for the 
 configuration. From now on there is no need to manually change the values in 
 the configuration file. All configuration can be done inside the JavaPEG 
 application.
 <LF>
 <LF>
 The previously stand alone language selection interface has been removed as a 
 result of the new configuration interface and the functionality has been 
 incorporated in the new interface.
 <LF>
 <LF>
 Other new functionality is listed here below:
 <LF>
 <LF>
 A new Image List format has been added. It is from now on possible to export 
 image lists supported by the XnView image viewer. (http://www.xnview.com/)
 <LF>
 <LF>
 It is possible to use the time and date from when a image was latest changed 
 when renaming images if time and date information is missing in the Exif 
 information. (This behavior is activated in the configuration).
 <LF>
 <LF>
 Automatic rotated log files might be compressed in Zip format, to save space.
 <LF>
 <LF>
 For statistical purposes it is possible to let JavaPEG attach the version 
 number to the version update check request made to the version update server. 
 The only information sent is which version of JavaPEG that is making the 
 version update check. In other words this is totally anonymous, no system 
 unique information is sent.
 <LF>
 <LF>
 Move to top and bottom buttons for the images in the Image List at the VIEW
 IMAGES tab has been added.
 <LF>
 <LF>
 Version 2.3<LF>
 ===========<LF>
 Released 2009-08-03 Version 2.3 of JavaPEG is a pure bug fix release. The 
 embedded download functionality which downloads the latest version JavaPEG was
 broken and still is in all prior versions to this version, which supports 
 version check against a version server (2.1 & 2.2). The reason for this bug to
 arise was that SourceForge made changes to the format of the URL to the 
 released files. And unfortunately JavaPEG of earlier versions was not generic 
 enough to handle that change.
 <LF>
 <LF>
 Version 2.2<LF>
 ===========<LF>
 Released 2009-08-02 Version 2.2 of JavaPEG has got a new layout of the 
 graphical user interface. From now on it can be resized and thereby can be 
 made to use the entire screen of a high resolution monitor. All major panels 
 can be adjusted regarding their size and they can also be completely hidden to
 free up space for the nonhidden panels. The size of each panel is saved 
 between application sessions.
 <LF>
 <LF>
 The second major difference is that the source selection window has been 
 removed and has been replaced with an instant available tree structure 
 displaying the file system. 
 <LF>
 <LF>
 There is also an added meta data panel which is showing detailed meta data for
 the images. The meta data is loaded and displayed when a thumb nail images is 
 marked.
 <LF>
 <LF>
 There is a new variable available, "Original file name", for the file name 
 template. It will insert the original file name of each image at the positions
 of all occurrences of the variable in the template when the rename process 
 takes place.
 <LF>
 <LF>
 A statusbar has been added to the bottom of the user interface. That statusbar
 displays selected path and the amount of images in that directory and how many
 columns and rows that is displayed in the thumb nail grid.
 <LF>
 <LF>
 Besides from above JavaPEG 2.2 has been given an entire new mode of operation.
 It is from now on possible, not only to rename images but also, to create 
 image lists (slide shows). It is possible to save lists in an internal JavaPEG
 format and then load them later on for further processing. It is also possible
 to export image lists to image list formats supported by third party software.
 In version 2.2 of JavaPEG there is support for exporting lists to PolyView and
  IrfanView format.
 <LF>
 <LF>
 Version 2.1<LF>
 ===========<LF>
 Released 2009-05-21 Version 2.1 of JavaPEG has got detailed information added 
 to the rename process progress window about the JPEG rename process, process 
 of copy any non JPEG files and the file integrity after the rename and file 
 copy.
 <LF>
 <LF>
 JavaPEG can from version 2.1, do an optional (configurable) version check at 
 application start. It does it against an version server. If there is a new 
 version available, the changes for that version compared to the current used
 version is presented. It is also possible to download the new version through
 JavaPEG
 <LF>
 <LF>
 If there is an layout.xml file that defines how the thumb nail overview shall 
 look like which have been defined by the JavaPEG user, then this file will be
 validated for validity against a schema.
 <LF>
 <LF>
 Version 2.0<LF>
 ===========<LF>
 Released 2009-05-05 Version 2.0 of JavaPEG is more or less a complete rewrite 
 compared to the 1.x versions. Despite this the concept is still the same: A 
 simple to use and secure tool to rename images created by a digital camera.
 <LF>
 <LF>
 The application still need a path to a source directory with images. When the 
 source directory has been chosen the destination directory must be selected. 
 After this a file name and sub directory template must be provided. As a last 
 step before the actual rename process can begin, it is possible to select 
 whether a thumb nail overview shall be created or not.
 <LF>
 <LF>
 A major difference with this version compared to the 1.x versions it that this
 version only supports renaming of copied image files. The reason for this is 
 to minimize the risk for data losses.
 <LF>
 <LF>
 New functionality in this version:
 <LF>
 <LF>
 The file chooser used to find the directory containing the images that shall 
 be renamed will show thumb nail versions of the images in the selected 
 directory. This will ease up the work with finding the images to rename.
 <LF>
 <LF>
 Thumb nails will be shown in the main application window, when a directory 
 with images has been selected in the file chooser and the Ok button has been 
 clicked. 
 <LF>
 <LF>
 There is an instant preview of the resulting file names when the templates for
 either the file name or the sub directory has been changed.
 <LF>
 <LF>
 There is an instant error message shown if an illegal variable or an illegal 
 character is used in the templates or the maximum path length has been 
 exceeded for the resulting file names in the selected destination directory.
 <LF>
 <LF>
 Before the rename process starts there is a validation process which makes 
 sure that: all input is valid, that maximum path length has not been exceeded,
 that the sub directory does not exist in the destination directory, that there
 is enough space to store the copied files in the destination directory and 
 that it is possible to create all the files in the destination directory that 
 exists in the source directory.
 <LF>
 <LF>
 A validation takes place after the rename process has finished. This 
 validation will check that all files that has been copied from the source 
 directory to the destination directory has been given the correct name and has
 the exact same content.
 <LF>
 <LF>
 Under the rename process, there is a status window showing the progress of the
 rename process.
 <LF>
 <LF>
 It is possible to change the look and layout of the optional thumb nail 
 overview.
 <LF>
 <LF>
 For potential error that can occur, there is logging to file.
 <LF>
 <LF>
 Version 1.01<LF>
 ============<LF>
 Released 2007-02-02: Version 1.01 of JavaPEG is a pure bug fix version. It 
 corrects incorrect behavior in rename engine and a problem with wrong error
 message.
 <LF>
 <LF>
 The program hang if a dot was present as first or last character in file name 
 template or sub folder name template. The exact same problem was also present 
 if there was white spaces first or last in templates. Besides from this there 
 was a correction of two error messages which was mixed up in the English 
 language file.
 <LF>
 <LF>
 Version 1.0<LF>
 ===========<LF>
 Released 2006-11-27: Version 1.0 of JavaPEG has the possibility to rename 
 image files of type jpeg if they have embedded Exif-information.
 <LF>
 <LF>
 The program will rename the files according to a, in the field 
 "FILENAME TEMPLATE", by the user, given template. There is a couple of 
 variables available and they can be found in the window with heading 
 "VARABLES".
 <LF>
 <LF>
 The user has the possibility to choose whether to rename the original files or
 copies of them, which will be saved in the same directory as original files, 
 or in another directory or in a sub directory in another directory than 
 original directory. It is possible to give the sub directory a name in the 
 same way as the files, in other words: by using variables. 
 <LF>
 <LF>
 Before rename process starts the user has the possibility to choose whether 
 JavaPEG shall create any thumb nails of renamed images. If there will be any 
 thumb nails there will also be a HTML file created, which will show all the 
 created thumb nails and the thumb nails will link to the full size images. 
 <LF>
 <LF>
 As last option, it is also possible to instruct the program to open 
 destination directory after finished rename process.
 
 references:
 
 REFERENCES<LF>
 ==========<LF>
 The meta data extractor library, created by Drew Noakes, is used internally in
 JavaPEG to fetch the meta data for each image that shall be renamed. 
 Information about this library can be found at: 
 http://www.drewnoakes.com/code/exif/
 <LF>
 <LF>
 CREDITS<LF>
 =======<LF>
 Angel Bueno:<LF>
  - Creation of the logic behind the variable "Original file name"<LF>
  - Spanish translation of JavaPEG 2.2<LF>
  - Spanish translation of JavaPEG 2.3<LF>
  - Spanish translation of JavaPEG 2.4
  
 configuration_logging:
 
 Unbuffered Logging:<LF>
 All logging is instantly written to the log file and is not being buffered in
 the memory. This might be useful for debugging.<LF> 
 <LF>
 Rotate Log Automatically:<LF>
 Means that the log file will be rotated, in other words that the current file 
 will be closed and a new will be created automatically.<LF>
 <LF>
 Compress Rotated Log File:<LF>
 When a log file is rotated it is possible to have it compressed to save space.
 The compression format used is ZIP.<LF>
 <LF>
 Log Rotate Size:<LF>
 Defines at which size the log file will be rotated. The size is set either in 
 KiB or in MiB. Smallest allowed size is 10 KiB and largest size is 100 MiB.
 <LF>
 <LF>
 Log Level:<LF>
 Specifies how detailed the logging will be. Possible alternatives are: DEBUG, 
 INFO, WARN, ERROR and FATAL. DEBUG will generate most detailed logging and 
 FATAL least detailed.<LF>
 <LF>
 Log Name:<LF>
 The name that the log file will have.<LF>
 <LF>
 Log Entry Timestamp Format:<LF>
 Specifies what the timestamp in the log file will look like.<LF>
 <LF>
 Log Entry Timestamp Preview:<LF>
 Displays a preview of what a log entry timestamp will look like in the log
 file.
 
 configuration_updates
 
 Enable Application Update Check:<LF>
 An update check will be performed at each application start to see if there 
 exist a newer version of JavaPEG.<LF>
 <LF>
 Add Version Information To Update Check:<LF>
 The version number of JavaPEG will be attached to the update check performed 
 at application start. This information is only used for statistical purposes 
 and is entirely anonymous. NO other information than the version number of 
 JavaPEG is sent.
 
 configuration_rename
 
 Use Last Modified Date If Exif Date Is Missing:<LF>
 If date information is missing in the Exif information, then latest changed 
 date for the file will be used instead.<LF>
 <LF>
 Use Last Modified Time If Exif Time Is Missing:<LF>
 If time information is missing in the Exif information, then latest changed 
 time for the file will be used instead.<LF>
 
 configuration_language   
    
 It is possible to either choose language manually, or to let JavaPEG select
 language automatically.<LF>
 <LF>
 If the language selection mode is manually then a language is selected by 
 clicking on the desired language in the list of available languages. If the
 language selection mode is automatically then JavaPEG will choose the language
 that matches the language used by the computer as system language. If the 
 language used by the system is not available then English is selected.